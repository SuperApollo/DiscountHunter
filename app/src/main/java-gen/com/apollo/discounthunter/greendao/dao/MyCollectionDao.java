package com.apollo.discounthunter.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.apollo.discounthunter.greendao.bean.MyCollection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MY_COLLECTION".
*/
public class MyCollectionDao extends AbstractDao<MyCollection, String> {

    public static final String TABLENAME = "MY_COLLECTION";

    /**
     * Properties of entity MyCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Web_url = new Property(1, String.class, "web_url", false, "WEB_URL");
        public final static Property App_url = new Property(2, String.class, "app_url", false, "APP_URL");
        public final static Property Pic = new Property(3, String.class, "pic", false, "PIC");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Reason = new Property(5, String.class, "reason", false, "REASON");
        public final static Property Price = new Property(6, String.class, "price", false, "PRICE");
        public final static Property Soldcount = new Property(7, String.class, "soldcount", false, "SOLDCOUNT");
        public final static Property Commission = new Property(8, String.class, "commission", false, "COMMISSION");
        public final static Property Item_cat_id = new Property(9, String.class, "item_cat_id", false, "ITEM_CAT_ID");
        public final static Property Num_iid = new Property(10, String.class, "num_iid", false, "NUM_IID");
        public final static Property Platform_id = new Property(11, String.class, "platform_id", false, "PLATFORM_ID");
        public final static Property End_time = new Property(12, String.class, "end_time", false, "END_TIME");
        public final static Property Release_time = new Property(13, String.class, "release_time", false, "RELEASE_TIME");
        public final static Property Eventid = new Property(14, String.class, "eventid", false, "EVENTID");
        public final static Property Addtime = new Property(15, String.class, "addtime", false, "ADDTIME");
        public final static Property Seller_id = new Property(16, String.class, "seller_id", false, "SELLER_ID");
        public final static Property Quan_id = new Property(17, String.class, "quan_id", false, "QUAN_ID");
        public final static Property Quan_price = new Property(18, String.class, "quan_price", false, "QUAN_PRICE");
        public final static Property Quan_link = new Property(19, String.class, "quan_link", false, "QUAN_LINK");
        public final static Property Flag = new Property(20, String.class, "flag", false, "FLAG");
        public final static Property TotalCount = new Property(21, String.class, "totalCount", false, "TOTAL_COUNT");
        public final static Property AppliedCount = new Property(22, String.class, "appliedCount", false, "APPLIED_COUNT");
    };


    public MyCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public MyCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MY_COLLECTION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"WEB_URL\" TEXT," + // 1: web_url
                "\"APP_URL\" TEXT," + // 2: app_url
                "\"PIC\" TEXT," + // 3: pic
                "\"TITLE\" TEXT," + // 4: title
                "\"REASON\" TEXT," + // 5: reason
                "\"PRICE\" TEXT," + // 6: price
                "\"SOLDCOUNT\" TEXT," + // 7: soldcount
                "\"COMMISSION\" TEXT," + // 8: commission
                "\"ITEM_CAT_ID\" TEXT," + // 9: item_cat_id
                "\"NUM_IID\" TEXT," + // 10: num_iid
                "\"PLATFORM_ID\" TEXT," + // 11: platform_id
                "\"END_TIME\" TEXT," + // 12: end_time
                "\"RELEASE_TIME\" TEXT," + // 13: release_time
                "\"EVENTID\" TEXT," + // 14: eventid
                "\"ADDTIME\" TEXT," + // 15: addtime
                "\"SELLER_ID\" TEXT," + // 16: seller_id
                "\"QUAN_ID\" TEXT," + // 17: quan_id
                "\"QUAN_PRICE\" TEXT," + // 18: quan_price
                "\"QUAN_LINK\" TEXT," + // 19: quan_link
                "\"FLAG\" TEXT," + // 20: flag
                "\"TOTAL_COUNT\" TEXT," + // 21: totalCount
                "\"APPLIED_COUNT\" TEXT);"); // 22: appliedCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_COLLECTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyCollection entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String web_url = entity.getWeb_url();
        if (web_url != null) {
            stmt.bindString(2, web_url);
        }
 
        String app_url = entity.getApp_url();
        if (app_url != null) {
            stmt.bindString(3, app_url);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(7, price);
        }
 
        String soldcount = entity.getSoldcount();
        if (soldcount != null) {
            stmt.bindString(8, soldcount);
        }
 
        String commission = entity.getCommission();
        if (commission != null) {
            stmt.bindString(9, commission);
        }
 
        String item_cat_id = entity.getItem_cat_id();
        if (item_cat_id != null) {
            stmt.bindString(10, item_cat_id);
        }
 
        String num_iid = entity.getNum_iid();
        if (num_iid != null) {
            stmt.bindString(11, num_iid);
        }
 
        String platform_id = entity.getPlatform_id();
        if (platform_id != null) {
            stmt.bindString(12, platform_id);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(13, end_time);
        }
 
        String release_time = entity.getRelease_time();
        if (release_time != null) {
            stmt.bindString(14, release_time);
        }
 
        String eventid = entity.getEventid();
        if (eventid != null) {
            stmt.bindString(15, eventid);
        }
 
        String addtime = entity.getAddtime();
        if (addtime != null) {
            stmt.bindString(16, addtime);
        }
 
        String seller_id = entity.getSeller_id();
        if (seller_id != null) {
            stmt.bindString(17, seller_id);
        }
 
        String quan_id = entity.getQuan_id();
        if (quan_id != null) {
            stmt.bindString(18, quan_id);
        }
 
        String quan_price = entity.getQuan_price();
        if (quan_price != null) {
            stmt.bindString(19, quan_price);
        }
 
        String quan_link = entity.getQuan_link();
        if (quan_link != null) {
            stmt.bindString(20, quan_link);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(21, flag);
        }
 
        String totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindString(22, totalCount);
        }
 
        String appliedCount = entity.getAppliedCount();
        if (appliedCount != null) {
            stmt.bindString(23, appliedCount);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MyCollection readEntity(Cursor cursor, int offset) {
        MyCollection entity = new MyCollection( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // web_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // app_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // soldcount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // commission
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // item_cat_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // num_iid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // platform_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // end_time
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // release_time
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // eventid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // addtime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // seller_id
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // quan_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // quan_price
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // quan_link
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // flag
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // totalCount
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // appliedCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MyCollection entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setWeb_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApp_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSoldcount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommission(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setItem_cat_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNum_iid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPlatform_id(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEnd_time(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRelease_time(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEventid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAddtime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSeller_id(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setQuan_id(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setQuan_price(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setQuan_link(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setFlag(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setTotalCount(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAppliedCount(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(MyCollection entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(MyCollection entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
